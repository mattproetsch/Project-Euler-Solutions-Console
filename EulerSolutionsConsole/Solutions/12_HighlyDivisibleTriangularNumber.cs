using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;

namespace EulerSolutionsConsole.Solutions
{
    class _12_HighlyDivisibleTriangularNumber : Solution
    {
        public static string Description
        {
            get
            {
                return @"The sequence of triangle numbers is generated by adding the natural numbers. So the 7th triangle number would be 1 + 2 + 3 + 4 + 5 + 6 + 7 = 28. The first ten terms would be:

1, 3, 6, 10, 15, 21, 28, 36, 45, 55, ...

Let us list the factors of the first seven triangle numbers:

     1: 1
     3: 1,3
     6: 1,2,3,6
    10: 1,2,5,10
    15: 1,3,5,15
    21: 1,3,7,21
    28: 1,2,4,7,14,28

We can see that 28 is the first triangle number to have over five divisors.

What is the value of the first triangle number to have over five hundred divisors?";
            }
        }
        public override int GetValue()
        {
            System.UInt64 triangularNumber = 0;
            System.UInt64 idx = 0;
            int nextThreshold = 50;
            bool cont = true;
            while (cont)
            {
                idx++;
                triangularNumber += idx;

                int numDivisors = NumDivisors(triangularNumber);

                if (numDivisors > nextThreshold)
                {
                    Console.WriteLine("Triangular number with {0} > {1} divisors: {2}", numDivisors, nextThreshold, triangularNumber);
                    nextThreshold += 50;
                }

                if (numDivisors > 500)
                    cont = false;
            }

            Console.WriteLine(triangularNumber);

            //System.UInt64 triangularNumber = 36;
            //Console.WriteLine("{0}: {1}", triangularNumber, NumDivisors(triangularNumber));

            //Console.WriteLine("{0}^2 = {1}: {2}", triangularNumber, triangularNumber * triangularNumber, NumDivisors(triangularNumber * triangularNumber));
            return 0;
        }

        public int NumDivisors(ulong num)
        {
            List<ulong> primeFactors = new List<ulong>();

            GetPrimeFactors(primeFactors, num);

            Dictionary<int, int> cardinality = new Dictionary<int, int>();

            for (int i = 0; i < primeFactors.Count; i++)
            {
                int curPower;
                if (!cardinality.TryGetValue((int)primeFactors[i], out curPower))
                    cardinality[(int)primeFactors[i]] = 1;
                else
                    cardinality[(int)primeFactors[i]] = curPower + 1;
            }

            int numDivisors = 1;
            foreach (KeyValuePair<int, int> kvp in cardinality)
            {
                numDivisors *= 1 + kvp.Value;
            }

            return numDivisors;
        }

        public int Choose(int n_int, int r_int)
        {
            ulong n = (ulong)n_int;
            ulong r = (ulong)r_int;

            ulong n_minus_r = n - r;
            if (n_minus_r < 0)
                throw new Exception("Invalid arguments: r must be less than or equal to n");

            ulong count = Math.Max(r, n_minus_r);
            ulong divisor = Math.Min(r, n_minus_r);

            ulong accum = 1;

            while (n > count)
            {
                accum = accum * n--;
            }

            return (int) (accum / Fact(divisor));
        }

        public ulong Fact(ulong n)
        {
            if (n == 0 || n == 1)
                return 1;
            return n * Fact(n - 1);
        }

        public List<ulong> GetPrimeFactors(List<ulong> factors, ulong n)
        {
            if (Prime(n))
            {
                factors.Add(n);
                return factors;
            }

            for (ulong i = 2; i < n; i++)
            {
                if (Prime((ulong)i))
                {
                    if (n % i == 0)
                    {
                        factors.Add(i);
                        return GetPrimeFactors(factors, n / i);
                    }
                }
            }

            return null;
        }

        bool Prime(ulong n)
        {
            if (n < 2)
                return false;
            if (n == 2)
                return true;

            ulong max = Convert.ToUInt64(Math.Ceiling(Math.Sqrt(n)));
            for (ulong i = 2; i <= max; i++)
            {
                if (n % i == 0)
                    return false;
            }
            return true;
        }
    }
}
